#' @export
#'
tab <- function(...) table(..., useNA = "ifany")
devtools::document()
View(format_sprint)
q()
devtools::check()
devtools::check()
devtools::document()
devtools::install()
devtools::check()
remove.packages("geneticToolBox")
.rs.restartR()
devtools::document()
devtools::install()
library(metabolomicsR)
library(geneticToolBox)
devtools::check()
devtools::check()
devtools::document()
devtools::install()
library(geneticToolBox)
devtools::check()
devtools::check()
devtools::check()
#' check data sets before merging
#' @param \dots Arguments to pass.
#' @export
#'
merge_check <- function(x, y, by.x = NULL, by.y = NULL) {
x <- as.data.table(x)
y <- as.data.table(y)
id_x <- x[,get(by.x)]
id_y <- y[,get(by.y)]
cat(paste0("Class for x: ",class(id_x), "; non-duplicate values: ", sum(duplicated(id_x), na.rm = TRUE), "; missing values: ", sum(is.na(id_x)), ". \n"))
cat(paste0("Class for y: ",class(id_y), "; non-duplicate values: ", sum(duplicated(id_y), na.rm = TRUE), "; missing values: ", sum(is.na(id_y)), ". \n"))
print(gplots::venn(list(unique(id_x), unique(id_y))))
}
devtools::check()
devtools::check()
devtools::install()
devtools::document()
library(geneticToolBox)
q()
devtools::document()
devtools::install()
library(geneticToolBox)
devtools::check()
library(geneticToolBox)
detach("package:geneticToolBox", unload = TRUE)
library(geneticToolBox)
format_sprint(0.06
)
format_sprint(0.003)
format_sprint(0.3)
format_sprint(0.3)
format_sprint(1)
#' format digits
#'
#' For numeric value
#' @param x A value or vector.
#' @export
#'
format_sprint<-function(x) {
x <- ifelse(abs(x)<0.01,sprintf(fmt="%.2E",x),sprintf(fmt="%.2f",x))
return(x)
}
format_sprint(1)
format_sprint(0.003)
#' format digits
#'
#' Keep two digits for numeric values.
#' @param x A value or vector.
#' @export
#'
format_digit <- function(x) {
x <- ifelse(abs(x)<0.01,sprintf(fmt="%.2e",x),sprintf(fmt="%.2f",x))
return(x)
}
format_sprint(0.003)
format_digit(0.003)
q()
devtools::document()
devtools::install()
library(geneticToolBox)
detach("package:geneticToolBox", unload = TRUE)
library(geneticToolBox)
#' check data sets before merging
#'
#' Check the class, duplication, and missingness of ID columns. A Venn plot is provided.
#' @param x,y data tables.
#' @param by.x,by.y Column names in x and y to merge on.
#' @export
#'
merge_check <- function(x, y, by.x = NULL, by.y = NULL) {
v_args <- mget(names(formals()),sys.frame(sys.nframe()))
x <- as.data.table(x)
y <- as.data.table(y)
id_x <- x[,get(by.x)]
id_y <- y[,get(by.y)]
cat(paste0("Class for x: ",class(id_x), "; duplicate values: ", sum(duplicated(id_x), na.rm = TRUE), "; missing values: ", sum(is.na(id_x)), ". \n"))
cat(paste0("Class for y: ",class(id_y), "; duplicate values: ", sum(duplicated(id_y), na.rm = TRUE), "; missing values: ", sum(is.na(id_y)), ". \n"))
v_list <- list(x = unique(id_x),
y = unique(id_y))
names(v_list) <- c(v_args[["x"]], v_args[["y"]])
gplots::venn(v_list)
return()
}
devtools::document()
devtools::install()
library(geneticToolBox)
q()
devtools::check()
devtools::document()
devtools::install()
library(geneticToolBox)
list.files(R.home())
file.info(bin)
file.info(doc)
file.info("doc")
file.info(".")
file.info("")
df_info_all  <- data.table(matrix(nrow = v_n, ncol = 10))
v_n <- length(x)
v_n <- 10
cat(paste0("Number of files: ", v_n))
file.info("")
df_info_all  <- data.table(matrix(nrow = v_n, ncol = 10))
df_info_all
setnames(df_info_all, names(file.info("")))
df_info_all
df_info_all <- cbind(file ="", df_info_all)
df_info_all
#' list file information in a folder
#' @param \dots Arguments to pass.
#' @export
#'
#'
file_info <- function(path = ".", pattern = NULL,  recursive = TRUE, full.names = TRUE, ignore.case = FALSE, all.files = FALSE) {
x <- list.files(path =  path, pattern = pattern, recursive = recursive, full.names = full.names, ignore.case = ignore.case, all.files = all.files)
v_n <- length(x)
cat(paste0("Number of files: ", v_n))
df_info_all  <- data.table(matrix(nrow = v_n, ncol = 10))
setnames(df_info_all, names(file.info("")))
df_info_all <- cbind(file ="", df_info_all)
pb <- txtProgressBar(min = 1, max = v_n, style = 3, file = stderr())
for(i in 1L:v_n) {
setTxtProgressBar(pb = pb, value = i)
v_i <- x[i]
df_one <- cbind(file = v_i, data.table(file.info(v_i)))
set(df_info_all, i = i,  names(df_info_all), value =  df_one)
}
close(con = pb)
df_info_all[, size_MB := size/1024/1024]
df_info_all[, file := basename(file)]
return(df_info_all)
}
dd <- file_info(path = "/n/holyscratch01/liang_lab/xikun/working/out/meta_NHS_CLSA_finnish_SOL_boston/gwas", pattern = "*meta5.gz")
dd
meta5.gz
warnings()
View(dd)
df_one <- file.info("")
class(df_one)
sapply(df_one, class)
df_one
df_one <- file.info("")
df_one
df_info_all <- df_one[1:10, ]
df_info_all
str(df_info_all)
df_one <- cbind(file = "", data.table(file.info(""))
df_one
df_info_all <- df_one[1:10, ]
df_info_all
str(df_info_all)
sapply(df_one, class)
setnames(df_info_all, ))
df_one <- cbind(file = "", data.table(file.info("")))
df_one
df_info_all <- df_one[1:10, ]
df_info_all
str(df_info_all)
#' list file information in a folder
#' @param \dots Arguments to pass.
#' @export
#'
#'
file_info <- function(path = ".", pattern = NULL,  recursive = TRUE, full.names = TRUE, ignore.case = FALSE, all.files = FALSE) {
x <- list.files(path =  path, pattern = pattern, recursive = recursive, full.names = full.names, ignore.case = ignore.case, all.files = all.files)
v_n <- length(x)
cat(paste0("Number of files: ", v_n))
df_one <- cbind(file = "", data.table(file.info("")))
df_info_all <- df_one[1:v_n, ]
pb <- txtProgressBar(min = 1, max = v_n, style = 3, file = stderr())
for(i in 1L:v_n) {
setTxtProgressBar(pb = pb, value = i)
v_i <- x[i]
df_one <- cbind(file = v_i, data.table(file.info(v_i)))
set(df_info_all, i = i,  names(df_info_all), value =  df_one)
}
close(con = pb)
df_info_all[, size_MB := size/1024/1024]
df_info_all[, file := basename(file)]
return(df_info_all)
}
dd <- file_info(path = "/n/holyscratch01/liang_lab/xikun/working/out/meta_NHS_CLSA_finnish_SOL_boston/gwas", pattern = "*meta5.gz")
#' list file information in a folder
#' @param \dots Arguments to pass.
#' @export
#'
#'
file_info <- function(path = ".", pattern = NULL,  recursive = TRUE, full.names = TRUE, ignore.case = FALSE, all.files = FALSE) {
x <- list.files(path =  path, pattern = pattern, recursive = recursive, full.names = full.names, ignore.case = ignore.case, all.files = all.files)
v_n <- length(x)
cat(paste0("Number of files: ", v_n, "\n"))
df_one <- cbind(file = "", data.table(file.info("")))
df_info_all <- df_one[1:v_n, ]
pb <- txtProgressBar(min = 1, max = v_n, style = 3, file = stderr())
for(i in 1L:v_n) {
setTxtProgressBar(pb = pb, value = i)
v_i <- x[i]
df_one <- cbind(file = v_i, data.table(file.info(v_i)))
set(df_info_all, i = i,  names(df_info_all), value =  df_one)
}
close(con = pb)
df_info_all[, size_MB := size/1024/1024]
df_info_all[, file := basename(file)]
return(df_info_all)
}
dd <- file_info(path = "/n/holyscratch01/liang_lab/xikun/working/out/meta_NHS_CLSA_finnish_SOL_boston/gwas", pattern = "*meta5.gz")
View(dd)
source("~/pkg/geneticToolBox/R/files.R", echo=TRUE)
source("~/pkg/geneticToolBox/R/files.R", echo=TRUE)
read_last_line <- function(path = ".", pattern = NULL,  recursive = TRUE, full.names = TRUE, ignore.case = FALSE, all.files = FALSE)  {
x <- list.files(path =  path, pattern = pattern, recursive = recursive, full.names = full.names, ignore.case = ignore.case, all.files = all.files)
v_n <- length(x)
cat(paste0("Number of files: ", v_n, "\n"))
df<- data.table(file = "", content = "")
df <- df[1:v_n, ]
df$file <- x
lastline <- function(filename) {
n <- system(paste0("wc -l ",filename, " | awk '{print $1}' "),intern=TRUE)
scan(filename,what="",skip=as.integer(n) -1 , nlines=1,sep="\n",quiet=TRUE)
}
pb <- txtProgressBar(min = 1, max = v_n, style = 3, file = stderr())
for(i in 1L:v_n) {
setTxtProgressBar(pb = pb, value = i)
v_i <- x[i]
v_content <- lastline(v_i)
if(length(v_content) == 0) {
set(df, i = i,  "content", value = "")
} else {
set(df, i = i,  "content", value = v_content)
}
}
return(df)
}
dd <- read_last_line(path = "/n/holyscratch01/liang_lab/xikun/working/out/meta_urine/logs", pattern = "*err")
dd
View(dd)
read_last_line <- function(path = ".", pattern = NULL,  recursive = TRUE, full.names = TRUE, ignore.case = FALSE, all.files = FALSE)  {
x <- list.files(path =  path, pattern = pattern, recursive = recursive, full.names = full.names, ignore.case = ignore.case, all.files = all.files)
v_n <- length(x)
cat(paste0("Number of files: ", v_n, "\n"))
df<- data.table(file = "", content = "")
df <- df[1:v_n, ]
df$file <- x
lastline <- function(filename) {
n <- system(paste0("wc -l ",filename, " | awk '{print $1}' "),intern=TRUE)
scan(filename,what="",skip=as.integer(n) -1 , nlines=1,sep="\n",quiet=TRUE)
}
pb <- txtProgressBar(min = 1, max = v_n, style = 3, file = stderr())
for(i in 1L:v_n) {
setTxtProgressBar(pb = pb, value = i)
v_i <- x[i]
v_content <- lastline(v_i)
if(length(v_content) == 0) {
set(df, i = i,  "content", value = "")
} else {
set(df, i = i,  "content", value = v_content)
}
}
df$file_name <- basename(df$file)
return(df)
}
dd <- read_last_line(path = "/n/holyscratch01/liang_lab/xikun/working/out/meta_urine/logs", pattern = "*err")
dd
View(dd)
dd <- read_last_line(path = "/n/holyscratch01/liang_lab/xikun/working/out/meta_urine/logs", pattern = "*")
dd
View(dd)
devtools::check()
q()
devtools::check()
devtools::document()
devtools::install()
library(geneticToolBox)
devtools::check()
devtools::document()
devtools::install()
library(geneticToolBox)
devtools::document()
devtools::install()
devtools::check()
geneticToolBox::meta_inverse_variance_df
devtools::document()
devtools::install()
library(geneticToolBox)
.rs.restartR()
devtools::check()
devtools::check()
devtools::document()
devtools::install()
library(geneticToolBox)
q()
